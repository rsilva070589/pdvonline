{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"color\": \"red\"\n  }\n};\nconst _hoisted_2 = {\n  style: {\n    \"margin-top\": \"0px\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"display\": \"flex\"\n  }\n};\nconst _hoisted_4 = {\n  key: 0,\n  style: {\n    \"margin-top\": \"17px\"\n  }\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  key: 0,\n  style: {\n    \"max-width\": \"90%\"\n  },\n  class: \"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 layout-spacing\"\n};\nconst _hoisted_7 = {\n  class: \"widget widget-unique-visitors\"\n};\n\nconst _hoisted_8 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"widget-heading\\\"><h5>Vendas Total Mensal</h5><div class=\\\"task-action\\\"><div class=\\\"dropdown btn-group\\\"><a href=\\\"javascript:;\\\" id=\\\"ddlVisitors\\\" class=\\\"btn dropdown-toggle btn-icon-only\\\" data-bs-toggle=\\\"dropdown\\\" aria-expanded=\\\"false\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"feather feather-more-horizontal\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"1\\\"></circle><circle cx=\\\"19\\\" cy=\\\"12\\\" r=\\\"1\\\"></circle><circle cx=\\\"5\\\" cy=\\\"12\\\" r=\\\"1\\\"></circle></svg></a></div></div></div>\", 1);\n\nconst _hoisted_9 = {\n  class: \"widget-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($setup.store.relAnual?.map(x => x.total)) + \" \", 1\n  /* TEXT */\n  ), _createElementVNode(\"span\", _hoisted_1, _toDisplayString($setup.store.itensRelVendas[0]), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"Filtros\"]), $setup.store.filtro.dataInicial && $setup.store.filtro.dataFinal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n    style: {\n      \"background-color\": \"rgb(153, 193, 134)\",\n      \"margin-top\": \"35px\",\n      \"height\": \"35px\"\n    },\n    class: \"btn btn-primary mt-3\",\n    onClick: _cache[0] || (_cache[0] = $event => $setup.getVendas($setup.tomorrow($setup.store.filtro.dataInicial), $setup.tomorrow($setup.store.filtro.dataFinal)))\n  }, \" buscar \")])) : _createCommentVNode(\"v-if\", true)]), _hoisted_5, (_openBlock(), _createElementBlock(_Fragment, null, _renderList([], (mes, indexMes) => {\n    return _createElementVNode(\"div\", {\n      key: indexMes\n    }, _toDisplayString(mes) + \" - \" + _toDisplayString($setup.formataDinheiro($setup.somaValor($setup.store.itensRelVendas.filter(f => f.DATA == mes).map(x => x.VALOR)))), 1\n    /* TEXT */\n    );\n  }), 64\n  /* STABLE_FRAGMENT */\n  )), $setup.store.relAnual ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _createElementVNode(\"div\", _hoisted_9, [$setup.unique_visitor_options ? (_openBlock(), _createBlock($setup[\"ApexChart\"], {\n    key: 0,\n    height: \"350\",\n    type: \"bar\",\n    options: $setup.unique_visitor_options,\n    series: [{\n      name: 'Vendas',\n      data: $setup.store.relAnual?.map(x => x.total)\n    }, {\n      name: 'Lucro',\n      data: $setup.store.relAnualLucro?.map(x => x.total)\n    }]\n  }, null, 8\n  /* PROPS */\n  , [\"options\", \"series\"])) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true)])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAGMA,KAAmB,EAAnB;IAAA;EAAA;;;EAMDA,KAAuB,EAAvB;IAAA;EAAA;;;EACIA,KAAwB,EAAxB;IAAA;EAAA;;;;EAGOA,KAAyB,EAAzB;IAAA;EAAA;;;gCAYZC,oBACE,KADF,EACE,IADF,EACE,IADF,EACE;AAAA;AADF;;;;EAUKD,KAAuB,EAAvB;IAAA;EAAA;EAAwBE,KAAK,EAAC;;;EAClBA,KAAK,EAAC;;;;;;EA4BFA,KAAK,EAAC;;;+FA/D5BC,aAAMC,QAAN,EAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAA3B,KAAoC,KAEvC;EAAA;KAAAN,oBAEO,MAFP,cAEOO,iBADAL,aAAMM,cAAN,CAAoB,CAApB,CACA,CAFP,EAC2B;EAAA;EAD3B,GAMAR,oBAmEM,KAnEN,cAmEM,CAlEFA,oBAcM,KAdN,cAcM,CAbFS,aAAWP,iBAAX,CAaE,EAZaA,aAAMQ,MAAN,CAAaC,WAAb,IAA4BT,aAAMQ,MAAN,CAAaE,2BAAxDC,oBAWM,KAXN,cAWM,CATFb,oBAQM,KARN,EAQM;IARDD,KAGI,EAHJ;MAAA;MAAA;MAAA;IAAA,CAQC;IAJFE,KAAK,EAAC,sBAIJ;IAHDa,OAAK,sCAAEZ,iBAAUA,gBAASA,aAAMQ,MAAN,CAAaC,WAAtB,CAAV,EAA6CT,gBAASA,aAAMQ,MAAN,CAAaE,SAAtB,CAA7C,CAAF;EAGJ,CARN,EAMa,UANb,CASE,CAXN,sCAYE,CAdN,CAkEE,EAnDFG,UAmDE,iBA7CFF,oBAEMG,SAFN,EAEM,IAFN,EAEMC,YAFsB,EAEtB,EAFwB,CAAlBC,GAAkB,EAAdC,QAAc,KAAN;WAAxBnB,oBAEM,KAFN,EAEM;MAF2BoB,GAAG,EAAED;IAEhC,CAFN,EAA8CZ,iBACxCW,GADwC,IACnC,KADmC,GAChCX,iBAAGL,uBAAgBA,iBAAUA,aAAMM,cAAN,CAAqBa,MAArB,CAA4BC,CAAC,IAAGA,CAAC,CAACC,IAAF,IAAUL,GAA1C,EAA+Cd,GAA/C,CAAmDC,CAAC,IAAIA,CAAC,CAACmB,KAA1D,CAAV,CAAhB,CAAH,CADd,EAC0G;IAAA;IAD1G;GAEM,CAFN;;EAAA,CA6CE,GAzCuGtB,aAAMC,0BAA/GU,oBAsCc,KAtCd,cAsCc,CArCFb,oBAoCM,KApCN,cAoCM,CAnCFyB,UAmCE,EARFzB,oBAOM,KAPN,cAOM,CANiBE,+CAAnBwB,aAIaxB,mBAJb,EAIa;UAAA;IAJ8ByB,MAAM,EAAC,KAIrC;IAJ2CC,IAAI,EAAC,KAIhD;IAHRC,OAAO,EAAE3B,6BAGD;IAFR4B,MAAM;MAAAC;MAAAC,MAA2B9B,aAAMC,QAAN,EAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAA3B;IAA3B,GAA2D;MAAAyB;MAAAC,MAAyB9B,aAAM+B,aAAN,EAAqB7B,GAArB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,KAAhC;IAAzB,CAA3D;EAEE,CAJb;;EAAA,6DAME,CAPN,CAQE,CApCN,CAqCE,CAtCd,sCAyCE,CAnEN","names":["style","_createElementVNode","class","$setup","relAnual","map","x","total","_toDisplayString","itensRelVendas","_createVNode","filtro","dataInicial","dataFinal","_createElementBlock","onClick","_hoisted_5","_Fragment","_renderList","mes","indexMes","key","filter","f","DATA","VALOR","_hoisted_8","_createBlock","height","type","options","series","name","data","relAnualLucro"],"sourceRoot":"","sources":["/home/renato/projetos/pdvsmart/src/views/dashboard/Dashboard.vue"],"sourcesContent":["<template>\n{{ store.relAnual?.map(x => x.total) }}\n\n<span style=\"color: red;\"> \n    {{ store.itensRelVendas[0]}}\n</span>\n\n \n\n<div style=\"margin-top: 0px\">   \n    <div style=\"display: flex;  \">\n        <Filtros />\n        <div     v-if=\"store.filtro.dataInicial && store.filtro.dataFinal\"\n                style=\"margin-top: 17px;\">\n            <div style=\"background-color: rgb(153, 193, 134);\n                    margin-top: 35px;\n                    height: 35px;\n                    \"\n                class=\"btn btn-primary mt-3\"\n                @click=\"getVendas(tomorrow(store.filtro.dataInicial),tomorrow(store.filtro.dataFinal))\"\n                        >\n                buscar\n            </div>\n        </div> \n    </div>\n    <div> \n</div>\n\n\n\n\n    <div v-for=\"mes,indexMes in []\" :key=\"indexMes\">\n        {{mes}} - {{ formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.DATA == mes).map(x => x.VALOR))) }}   \n    </div>   \n\n    <div style=\"max-width: 90%;\" class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 layout-spacing\" v-if=\"store.relAnual\"> \n                <div class=\"widget widget-unique-visitors\">\n                    <div class=\"widget-heading\">\n                        <h5>Vendas Total Mensal</h5>\n                        <div class=\"task-action\">\n                            <div class=\"dropdown btn-group\">\n                                <a href=\"javascript:;\" id=\"ddlVisitors\" class=\"btn dropdown-toggle btn-icon-only\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                                    <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        width=\"24\"\n                                        height=\"24\"\n                                        viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\"\n                                        stroke-width=\"2\"\n                                        stroke-linecap=\"round\"\n                                        stroke-linejoin=\"round\"\n                                        class=\"feather feather-more-horizontal\"\n                                    >\n                                        <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n                                        <circle cx=\"19\" cy=\"12\" r=\"1\"></circle>\n                                        <circle cx=\"5\" cy=\"12\" r=\"1\"></circle>\n                                    </svg>\n                                </a>\n                               \n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"widget-content\">\n                        <apex-chart  v-if=\"unique_visitor_options\" height=\"350\" type=\"bar\" \n                            :options=\"unique_visitor_options\" \n                            :series=\" [{name: 'Vendas' ,data: store.relAnual?.map(x => x.total)},{name: 'Lucro' ,data: store.relAnualLucro?.map(x => x.total)}]  \"\n                            >\n                        </apex-chart>\n\n                    </div>\n                </div>\n            </div>\n \n \n</div>\n</template>\n\n<script setup> \n    import Progress from '@/components/Progress.vue';   \n    import { onMounted, ref, computed } from 'vue';\n    import axios from 'axios'\n    import { useMeta } from '@/composables/use-meta';\n    // import Filtros from './Filtros.vue'\n    import ApexChart from 'vue3-apexcharts';  \n    import {indexStore, useUserStore} from '../../store/indexStore'\n    import Filtros from './Filtros.vue'\n    useMeta({ title: 'Multiple Tables' }); \n    const code_arr = ref([]); \n    const store = indexStore(); \n    const storeLogin = useUserStore();\n\n    store.relAnual = []\n    store.anoSelecionado = dataAno(new Date()) \n \n\n    onMounted(() => {\n        bind_data(); \n    });\n\n    const bind_data = async  () => { \n        getFormasPgto()\n    }\n\n    store.formasPagamentos = []\n\nconst getFormasPgto = () => {\n      let data = JSON.stringify({\n  \"SCHEMA\": storeLogin.empresas?.schema \n  });\n\n  let config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: store.baseApiHTTPS+'/GetFormapagamento',\n  headers: { \n      'Content-Type': 'application/json'\n  },\n  data : data\n  };\n\n  axios.request(config)\n  .then((response) => { \n  response.data.map(x=> {\n          const itens = {\n              ID: x.id,\n              DESCRICAO: x.descricao,\n              PERCENTUAL: x.taxa         \n             }\n      store.formasPagamentos.push(itens)\n      }) \n  })\n  .catch((error) => {\n  console.log(error);\n  });\n  }\n\n    function getVendas(dataIni, dataFim){\n        store.itensRelVendas = []\n\n        let data = JSON.stringify({\n        \"DATAINI\": dataIni,\n        \"DATAFIM\": dataFim,\n        \"SCHEMA\": 'MERCEARIABRAGATTO'\n        });\n\n        let config = {\n        method: 'post',\n        maxBodyLength: Infinity,\n        url: store.baseApiHTTPS+'/dashboard',\n        headers: { \n            'Content-Type': 'application/json'\n        },\n        data : data\n        };\n\n        axios.request(config)\n        .then((response) => {\n            response.data.filter(f=> f.tipo_venda=='NORMAL').map(x =>{\n    \n                const dados = { \n                    ID: x.id,\n                    MES: x.data.substring(3,4),\n                    ANO: x.data ,\n                    CATGO: x.categoria,\n                    PRODUTO: x.cod_produto, \n                    VALOR: x.valor,\n                    CUSTO: x.custo,\n                    LUCRO: arredonda(x.lucro,2), \n                    TIPO_VENDA: x.tipo_venda\n                } \n                store.itensRelVendas.push(dados)\n            })\n            calculaMes()\n        })\n        .catch((error) => {\n        console.log(error);\n        }); \n    }\n\n    var arredonda = function(numero, casasDecimais) {   \n    casasDecimais = typeof casasDecimais !== 'undefined' ?  casasDecimais : 0;\n    numero = typeof numero !== 'undefined' ?  numero : 0;\n    return +(Math.floor(numero + ('e+' + casasDecimais)) + ('e-' + casasDecimais));\n    };\n\n    function somaValor(array) { \n            var arr =  array     \n            var sum = 0; \n            for(var i =0;i<arr.length;i++){ \n              sum+=arr[i]; \n            }               \n            return sum\n          }\n\n   function formataDinheiro(item) {\n             let venda = item;\n             if (!!venda && venda.toString().includes(\",\")) {\n               venda = venda.toString().replace(\",\", \".\");\n             }\n             return parseFloat(venda)\n               .toFixed(2)\n               .replace(\".\", \",\")\n               .replace(/(\\d)(?=(\\d{3})+\\,)/g, \"$1.\");\n        }\n\n  \n\n        function dataAno(d){ \n        var data =  new Date(d),\n            dia  = data.getDate().toString(),\n            diaF = (dia.length == 1) ? '0'+dia : dia,\n            mes  = (data.getMonth()+1).toString(), //+1 pois no getMonth Janeiro começa com zero.\n            mesF = (mes.length == 1) ? '0'+mes : mes,\n            anoF = data.getFullYear();\n        return  anoF;\n        }\n\n function tomorrow  (dt)  {\n  \n  // Creating the date instance\n  let d = new Date(dt);\n\n  // Adding one date to the present date\n  d.setDate(d.getDate() + 1);\n\n  let year = d.getFullYear()\n  let month = String(d.getMonth() + 1)\n  let day = String(d.getDate())\n  let mes = null\n\n  // Adding leading 0 if the day or month\n  // is one digit value\n  month = month.length == 1 ? \n      month.padStart('2', '0') : month;\n\n   //   if(month == '01'){ mes = 'Jan' }\n   //   if(month == '02'){ mes = 'Feb' }\n   //   if(month == '03'){ mes = 'Mar' }\n   //   if(month == '04'){ mes = 'Apr' }\n   //   if(month == '05'){ mes = 'May' }\n   //   if(month == '06'){ mes = 'Jun' }\n   //   if(month == '07'){ mes = 'Jul' }\n   //   if(month == '08'){ mes = 'Aug' }\n   //   if(month == '09'){ mes = 'Sept' }\n   //   if(month == '10'){ mes = 'Oct' }\n   //   if(month == '11'){ mes = 'Nov' }\n   //  if(month == '12'){ mes = 'Dec' }        \n\n\n  day = day.length == 1 ? \n      day.padStart('2', '0') : day;\n\n  // Printing the present date \n  return(`${day}/${month}/${year}`);\n  }\n\n  function calculaMes(){\n     store.relAnual = [\n        {\n            mes: 'janeiro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '01' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'fevereiro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '02' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'marco',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '03' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'abril',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '04' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'maio',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '05' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'junho',\n            total: (somaValor(store.itensRelVendas.filter(f=> f.MES == '06' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'julho',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '07' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'agosto',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '08' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'setembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '09' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'outubro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '10' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'novembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '11' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        },\n        {\n            mes: 'desembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '12' && f.ANO==store.anoSelecionado).map(x => x.VALOR)))\n        }\n    ]  \n    store.relAnualLucro = [\n        {\n            mes: 'janeiro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '01' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'fevereiro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '02' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'marco',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '03' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'abril',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '04' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'maio',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '05' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'junho',\n            total: (somaValor(store.itensRelVendas.filter(f=> f.MES == '06' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'julho',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '07' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'agosto',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '08' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'setembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '09' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'outubro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '10' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'novembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '11' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        },\n        {\n            mes: 'desembro',\n            total: formataDinheiro(somaValor(store.itensRelVendas.filter(f=> f.MES == '12' && f.ANO==store.anoSelecionado).map(x => x.LUCRO)))\n        }\n    ]  \n  }\n   \n \nconst options_3 =  computed(() => {\n    return {\n        chart: { toolbar: { show: false } }, \n        dataLabels: { enabled: false },\n        stroke: { show: true, width: 2, \n        colors: ['transparent'] },\n        plotOptions: { bar: { horizontal: false, columnWidth: '55%', borderRadius: 8 }, },\n        xaxis: { categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'], },\n        yaxis: { title: { text: '$ (thousands)' } },\n        fill: { opacity: 1 },\n        tooltip: { y: { formatter: function (val) { return \"$ \" + val + \" thousands\" } } }\n    }\n  \n})\n \n\n  const unique_visitor_options = computed(() => {\n        \n       return {\n        chart: { toolbar: { show: false } }, \n         dataLabels: { enabled: !store.detectar_mobile(), formatter: function (val) {return \"R$ \" +(val) },\n              offsetY: -20,\n              style: {\n                fontSize: '11px',\n                colors: [\"#000000\"]\n              }              \n            },\n        stroke: { show: true, width: 2, \n        colors: ['transparent'] },\n        plotOptions: { bar: { horizontal: false, columnWidth: '55%', borderRadius: 8 }, },\n        xaxis: { categories: [ 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'], },\n        yaxis: { title: { text: '$ (thousands)' } },\n        fill: { opacity: 1 },\n        tooltip: { y: { formatter: function (val) { return \"$ \" + val + \" thousands\" } } }\n       }\n    });\n\n\n     \n    \n</script>"]},"metadata":{},"sourceType":"module"}
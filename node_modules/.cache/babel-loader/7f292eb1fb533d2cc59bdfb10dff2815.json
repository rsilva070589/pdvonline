{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { onMounted, ref } from 'vue';\nimport VueEasyLightbox from 'vue-easy-lightbox';\nimport '@/assets/sass/components/custom-lightbox.scss';\nimport { useMeta } from '@/composables/use-meta';\nexport default {\n  __name: 'lightbox',\n\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n\n    useMeta({\n      title: 'Lightbox'\n    });\n    const code_arr = ref([]);\n    const index = ref(null);\n    const allControls = ref(true);\n    const visible = ref(false);\n    const items = ref([]);\n    onMounted(() => {\n      initData();\n    });\n\n    const initData = () => {\n      if (allControls.value) {\n        items.value = [{\n          src: require(''),\n          title: 'This is dummy caption. It has been placed here solely to demonstrate the look and feel of finished, typeset text.',\n          description: 'Photo: Samuel Rohl'\n        }, {\n          src: require(''),\n          title: 'This is dummy caption. It has been placed here solely to demonstrate the look and feel of finished, typeset text.',\n          description: 'Photo: Samuel Rohl'\n        }, {\n          src: require(''),\n          title: \"Dummy caption. It's Greek to you. Unless, of course, you're Greek, in which case, it really makes no sense.\",\n          description: 'Photo: Michael Hull'\n        }, {\n          src: require(''),\n          thumb: require(''),\n          title: 'This is dummy caption.',\n          description: 'Photo: Folkert Gorter'\n        }, {\n          src: require(''),\n          title: \"It's a dummy caption. He who searches for meaning here will be sorely disappointed.\",\n          description: 'Photo: Thomas Lefebvre'\n        }, {\n          src: require(''),\n          title: \"It's a dummy caption. He who searches for meaning here will be sorely disappointed.\",\n          description: 'Photo: Thomas Lefebvre'\n        }];\n      } else {\n        items.value = [{\n          src: require('')\n        }, {\n          src: require('')\n        }, {\n          src: require('')\n        }, {\n          src: require('')\n        }, {\n          src: require('')\n        }, {\n          src: require('')\n        }];\n      }\n    };\n\n    const toggleCode = name => {\n      if (code_arr.value.includes(name)) {\n        code_arr.value = code_arr.value.filter(d => d != name);\n      } else {\n        code_arr.value.push(name);\n      }\n    };\n\n    const __returned__ = {\n      code_arr,\n      index,\n      allControls,\n      visible,\n      items,\n      initData,\n      toggleCode,\n      onMounted,\n      ref,\n\n      get VueEasyLightbox() {\n        return VueEasyLightbox;\n      },\n\n      get useMeta() {\n        return useMeta;\n      }\n\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":";AAmGI,SAASA,SAAT,EAAoBC,GAApB,QAA+B,KAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAO,+CAAP;AAEA,SAASC,OAAT,QAAwB,wBAAxB;;;;;;;;;IACAA,OAAO,CAAC;MAAEC,KAAK,EAAE;IAAT,CAAD,CAAP;IAEA,MAAMC,QAAQ,GAAGJ,GAAG,CAAC,EAAD,CAApB;IACA,MAAMK,KAAK,GAAGL,GAAG,CAAC,IAAD,CAAjB;IACA,MAAMM,WAAW,GAAGN,GAAG,CAAC,IAAD,CAAvB;IACA,MAAMO,OAAO,GAAGP,GAAG,CAAC,KAAD,CAAnB;IACA,MAAMQ,KAAK,GAAGR,GAAG,CAAC,EAAD,CAAjB;IAEAD,SAAS,CAAC,MAAM;MACZU,QAAQ;IACX,CAFQ,CAAT;;IAIA,MAAMA,QAAQ,GAAG,MAAM;MACnB,IAAIH,WAAW,CAACI,KAAhB,EAAuB;QACnBF,KAAK,CAACE,KAAN,GAAc,CACV;UACIC,GAAG,EAAEC,OAAO,CAAC,EAAD,CADhB;UAEIT,KAAK,EAAE,mHAFX;UAGIU,WAAW,EAAE;QAHjB,CADU,EAMV;UACIF,GAAG,EAAEC,OAAO,CAAC,EAAD,CADhB;UAEIT,KAAK,EAAE,mHAFX;UAGIU,WAAW,EAAE;QAHjB,CANU,EAWV;UACIF,GAAG,EAAEC,OAAO,CAAC,EAAD,CADhB;UAEIT,KAAK,EAAE,6GAFX;UAGIU,WAAW,EAAE;QAHjB,CAXU,EAgBV;UAAEF,GAAG,EAAEC,OAAO,CAAC,EAAD,CAAd;UAAoBE,KAAK,EAAEF,OAAO,CAAC,EAAD,CAAlC;UAAwCT,KAAK,EAAE,wBAA/C;UAAyEU,WAAW,EAAE;QAAtF,CAhBU,EAiBV;UACIF,GAAG,EAAEC,OAAO,CAAC,EAAD,CADhB;UAEIT,KAAK,EAAE,qFAFX;UAGIU,WAAW,EAAE;QAHjB,CAjBU,EAsBV;UACIF,GAAG,EAAEC,OAAO,CAAC,EAAD,CADhB;UAEIT,KAAK,EAAE,qFAFX;UAGIU,WAAW,EAAE;QAHjB,CAtBU,CAAd;MA4BH,CA7BD,MA6BO;QACHL,KAAK,CAACE,KAAN,GAAc,CACV;UAAEC,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CADU,EAEV;UAAED,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CAFU,EAGV;UAAED,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CAHU,EAIV;UAAED,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CAJU,EAKV;UAAED,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CALU,EAMV;UAAED,GAAG,EAAEC,OAAO,CAAC,EAAD;QAAd,CANU,CAAd;MAQH;IACJ,CAxCD;;IA0CA,MAAMG,UAAU,GAAIC,IAAD,IAAU;MACzB,IAAIZ,QAAQ,CAACM,KAAT,CAAeO,QAAf,CAAwBD,IAAxB,CAAJ,EAAmC;QAC/BZ,QAAQ,CAACM,KAAT,GAAiBN,QAAQ,CAACM,KAAT,CAAeQ,MAAf,CAAuBC,CAAD,IAAOA,CAAC,IAAIH,IAAlC,CAAjB;MACH,CAFD,MAEO;QACHZ,QAAQ,CAACM,KAAT,CAAeU,IAAf,CAAoBJ,IAApB;MACH;IACJ,CAND","names":["onMounted","ref","VueEasyLightbox","useMeta","title","code_arr","index","allControls","visible","items","initData","value","src","require","description","thumb","toggleCode","name","includes","filter","d","push"],"sources":["/home/renato/projetos/pdvsmart/src/views/components/lightbox.vue"],"sourcesContent":["<template>\n    <div class=\"layout-px-spacing\">\n        <teleport to=\"#breadcrumb\">\n            <ul class=\"navbar-nav flex-row\">\n                <li>\n                    <div class=\"page-header\">\n                        <nav class=\"breadcrumb-one\" aria-label=\"breadcrumb\">\n                            <ol class=\"breadcrumb\">\n                                <li class=\"breadcrumb-item\"><a href=\"javascript:;\">Components</a></li>\n                                <li class=\"breadcrumb-item active\" aria-current=\"page\"><span>Lightbox</span></li>\n                            </ol>\n                        </nav>\n                    </div>\n                </li>\n            </ul>\n        </teleport>\n\n        <div class=\"row layout-top-spacing\">\n            <div class=\"col-12\">\n                <div class=\"alert alert-arrow-left alert-icon-left alert-light-info mb-0 text-break\">\n                    <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"24\"\n                        height=\"24\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-width=\"2\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        class=\"feather feather-bell\"\n                    >\n                        <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"></path>\n                        <path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path>\n                    </svg>\n                    Documentation:\n                    <a target=\"_blank\" href=\"https://www.npmjs.com/package/vue-easy-lightbox\" class=\"text-info\"> https://www.npmjs.com/package/vue-easy-lightbox </a>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12 layout-spacing layout-top-spacing\">\n                <div class=\"statbox panel box box-shadow\">\n                    <div class=\"panel-heading\">\n                        <div class=\"row\">\n                            <div class=\"col-xl-12 col-md-12 col-sm-12 col-12\">\n                                <h4>Lightbox</h4>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"panel-body\">\n                        <div>\n                            <div class=\"radio-info mb-4 custom-control custom-radio\">\n                                <input v-model=\"allControls\" type=\"radio\" class=\"custom-control-input\" :value=\"true\" id=\"rdo1\" @change=\"initData()\" />\n                                <label class=\"custom-control-label\" for=\"rdo1\"> All controls<br /><span>caption, slideshow, thumbnails and fullscreen buttons, tap to toggle controls</span></label>\n                            </div>\n                            <div class=\"radio-info mb-4 custom-control custom-radio\">\n                                <input v-model=\"allControls\" type=\"radio\" class=\"custom-control-input\" :value=\"false\" id=\"rdo2\" @change=\"initData()\" />\n                                <label class=\"custom-control-label\" for=\"rdo2\"> Minimal<br /><span>no caption, no slideshow, no thumbnails, no fullscreen, tap to close</span></label>\n                            </div>\n                        </div>\n\n                        <vue-easy-lightbox\n                            :visible=\"visible\"\n                            :imgs=\"items\"\n                            :index=\"index\"\n                            scrollDisabled\n                            moveDisabled\n                            loop\n                            :class=\"{ minimal: !allControls }\"\n                            @hide=\"\n                                index = null;\n                                visible = false;\n                            \"\n                        ></vue-easy-lightbox>\n                        <div class=\"demo-gallery\">\n                            <a\n                                v-for=\"(item, i) in items\"\n                                :key=\"i\"\n                                href=\"javascript:;\"\n                                :class=\"`img-${i + 1}`\"\n                                @click=\"\n                                    index = i;\n                                    visible = true;\n                                \"\n                            >\n                                <img :src=\"item.src\" alt=\"image-gallery\" />\n                            </a>\n                        </div>\n\n                        <div class=\"clearfix\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\n    import { onMounted, ref } from 'vue';\n    import VueEasyLightbox from 'vue-easy-lightbox';\n\n    import '@/assets/sass/components/custom-lightbox.scss';\n\n    import { useMeta } from '@/composables/use-meta';\n    useMeta({ title: 'Lightbox' });\n\n    const code_arr = ref([]);\n    const index = ref(null);\n    const allControls = ref(true);\n    const visible = ref(false);\n    const items = ref([]);\n\n    onMounted(() => {\n        initData();\n    });\n\n    const initData = () => {\n        if (allControls.value) {\n            items.value = [\n                {\n                    src: require(''),\n                    title: 'This is dummy caption. It has been placed here solely to demonstrate the look and feel of finished, typeset text.',\n                    description: 'Photo: Samuel Rohl',\n                },\n                {\n                    src: require(''),\n                    title: 'This is dummy caption. It has been placed here solely to demonstrate the look and feel of finished, typeset text.',\n                    description: 'Photo: Samuel Rohl',\n                },\n                {\n                    src: require(''),\n                    title: \"Dummy caption. It's Greek to you. Unless, of course, you're Greek, in which case, it really makes no sense.\",\n                    description: 'Photo: Michael Hull',\n                },\n                { src: require(''), thumb: require(''), title: 'This is dummy caption.', description: 'Photo: Folkert Gorter' },\n                {\n                    src: require(''),\n                    title: \"It's a dummy caption. He who searches for meaning here will be sorely disappointed.\",\n                    description: 'Photo: Thomas Lefebvre',\n                },\n                {\n                    src: require(''),\n                    title: \"It's a dummy caption. He who searches for meaning here will be sorely disappointed.\",\n                    description: 'Photo: Thomas Lefebvre',\n                },\n            ];\n        } else {\n            items.value = [\n                { src: require('') },\n                { src: require('') },\n                { src: require('') },\n                { src: require('') },\n                { src: require('') },\n                { src: require('') },\n            ];\n        }\n    };\n\n    const toggleCode = (name) => {\n        if (code_arr.value.includes(name)) {\n            code_arr.value = code_arr.value.filter((d) => d != name);\n        } else {\n            code_arr.value.push(name);\n        }\n    };\n</script>\n"]},"metadata":{},"sourceType":"module"}
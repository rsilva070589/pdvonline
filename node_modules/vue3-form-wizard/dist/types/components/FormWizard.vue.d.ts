declare namespace _default {
    const name: string;
    namespace components {
        export { WizardButton };
        export { WizardStep };
    }
    namespace props {
        namespace id {
            export const type: StringConstructor;
            const _default: string;
            export { _default as default };
        }
        namespace title {
            const type_1: StringConstructor;
            export { type_1 as type };
            const _default_1: string;
            export { _default_1 as default };
        }
        namespace subtitle {
            const type_2: StringConstructor;
            export { type_2 as type };
            const _default_2: string;
            export { _default_2 as default };
        }
        namespace nextButtonText {
            const type_3: StringConstructor;
            export { type_3 as type };
            const _default_3: string;
            export { _default_3 as default };
        }
        namespace backButtonText {
            const type_4: StringConstructor;
            export { type_4 as type };
            const _default_4: string;
            export { _default_4 as default };
        }
        namespace finishButtonText {
            const type_5: StringConstructor;
            export { type_5 as type };
            const _default_5: string;
            export { _default_5 as default };
        }
        namespace hideButtons {
            const type_6: BooleanConstructor;
            export { type_6 as type };
            const _default_6: boolean;
            export { _default_6 as default };
        }
        const validateOnBack: BooleanConstructor;
        namespace color {
            const type_7: StringConstructor;
            export { type_7 as type };
            const _default_7: string;
            export { _default_7 as default };
        }
        namespace errorColor {
            const type_8: StringConstructor;
            export { type_8 as type };
            const _default_8: string;
            export { _default_8 as default };
        }
        namespace shape {
            const type_9: StringConstructor;
            export { type_9 as type };
            const _default_9: string;
            export { _default_9 as default };
        }
        namespace layout {
            const type_10: StringConstructor;
            export { type_10 as type };
            const _default_10: string;
            export { _default_10 as default };
        }
        namespace stepsClasses {
            const type_11: (ArrayConstructor | StringConstructor)[];
            export { type_11 as type };
            const _default_11: string;
            export { _default_11 as default };
        }
        namespace stepSize {
            const type_12: StringConstructor;
            export { type_12 as type };
            const _default_12: string;
            export { _default_12 as default };
            export function validator(value: any): boolean;
        }
        namespace transition {
            const type_13: StringConstructor;
            export { type_13 as type };
            const _default_13: string;
            export { _default_13 as default };
        }
        namespace startIndex {
            const type_14: NumberConstructor;
            export { type_14 as type };
            const _default_14: number;
            export { _default_14 as default };
            export function validator_1(value: any): boolean;
            export { validator_1 as validator };
        }
    }
    function provide(): {
        addTab: any;
        removeTab: any;
    };
    function provide(): {
        addTab: any;
        removeTab: any;
    };
    function data(): {
        activeTabIndex: number;
        currentPercentage: number;
        maxStep: number;
        loading: boolean;
        tabs: never[];
    };
    function data(): {
        activeTabIndex: number;
        currentPercentage: number;
        maxStep: number;
        loading: boolean;
        tabs: never[];
    };
    namespace computed {
        function slotProps(): any;
        function slotProps(): any;
        function tabCount(): any;
        function tabCount(): any;
        function isLastStep(): any;
        function isLastStep(): any;
        function isVertical(): any;
        function isVertical(): any;
        function displayPrevButton(): any;
        function displayPrevButton(): any;
        function stepPercentage(): number;
        function stepPercentage(): number;
        function progressBarStyle(): any;
        function progressBarStyle(): any;
        function fillButtonStyle(): any;
        function fillButtonStyle(): any;
        function progress(): number;
        function progress(): number;
    }
    namespace methods {
        function emitTabChange(prevIndex: any, nextIndex: any): void;
        function emitTabChange(prevIndex: any, nextIndex: any): void;
        function addTab(item: any): void;
        function addTab(item: any): void;
        function removeTab(item: any): void;
        function removeTab(item: any): void;
        function reset(): void;
        function reset(): void;
        function activateAll(): void;
        function activateAll(): void;
        function navigateToTab(index: any): any;
        function navigateToTab(index: any): any;
        function nextTab(): void;
        function nextTab(): void;
        function prevTab(): void;
        function prevTab(): void;
        function focusNextTab(): void;
        function focusNextTab(): void;
        function focusPrevTab(): void;
        function focusPrevTab(): void;
        function setLoading(value: any): void;
        function setLoading(value: any): void;
        function setValidationError(error: any): void;
        function setValidationError(error: any): void;
        function validateBeforeChange(promiseFn: any, callback: any): void;
        function validateBeforeChange(promiseFn: any, callback: any): void;
        function executeBeforeChange(validationResult: any, callback: any): void;
        function executeBeforeChange(validationResult: any, callback: any): void;
        function beforeTabChange(index: any, callback: any): void;
        function beforeTabChange(index: any, callback: any): void;
        function afterTabChange(index: any): void;
        function afterTabChange(index: any): void;
        function changeTab(oldIndex: any, newIndex: any, emitChangeEvent?: boolean): boolean;
        function changeTab(oldIndex: any, newIndex: any, emitChangeEvent?: boolean): boolean;
        function tryChangeRoute(tab: any): void;
        function tryChangeRoute(tab: any): void;
        function checkRouteChange(route: any): void;
        function checkRouteChange(route: any): void;
        function deactivateTabs(): void;
        function deactivateTabs(): void;
        function activateTab(index: any): void;
        function activateTab(index: any): void;
        function activateTabAndCheckStep(index: any): void;
        function activateTabAndCheckStep(index: any): void;
        function initializeTabs(): void;
        function initializeTabs(): void;
    }
    function mounted(): void;
    function mounted(): void;
    const watch: {
        '$route.path'(newRoute: any): void;
    };
}
export default _default;
import WizardButton from "./WizardButton.vue";
import WizardStep from "./WizardStep.vue";
